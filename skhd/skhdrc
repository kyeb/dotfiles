# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# Quickly reload skhd config
alt + shift - r : skhd --reload && osascript -e 'display notification "config reloaded" with title "skhd"'

# New terminal. If already focused on a terminal, use Alacritty's shortcut so the new one opens with the same cwd
alt + shift - return : [ $(yabai -m query --windows | jq '.[] | select(.["has-focus"]).app') = '"Alacritty"' ] && skhd --key "cmd - n" || /Applications/Alacritty.app/Contents/MacOS/alacritty

# change focus
alt - l :     yabai -m window --focus east  || yabai -m display --focus  east
alt - right : yabai -m window --focus east  || yabai -m display --focus  east
alt - h :     yabai -m window --focus west  || yabai -m display --focus  west
alt - left :  yabai -m window --focus west  || yabai -m display --focus  west
alt - k :     yabai -m window --focus north || yabai -m display --focus north
alt - up :    yabai -m window --focus north || yabai -m display --focus north
alt - j :     yabai -m window --focus south || yabai -m display --focus south
alt - down :  yabai -m window --focus south || yabai -m display --focus south

# shift window within current workspace
alt + shift - l     : yabai -m window --warp east  || $(yabai -m window --display  east; yabai -m display --focus  east)
alt + shift - right : yabai -m window --warp east  || $(yabai -m window --display  east; yabai -m display --focus  east)
alt + shift - h     : yabai -m window --warp west  || $(yabai -m window --display  west; yabai -m display --focus  west)
alt + shift - left  : yabai -m window --warp west  || $(yabai -m window --display  west; yabai -m display --focus  west)
alt + shift - k     : yabai -m window --warp north || $(yabai -m window --display north; yabai -m display --focus north)
alt + shift - up    : yabai -m window --warp north || $(yabai -m window --display north; yabai -m display --focus north)
alt + shift - j     : yabai -m window --warp south || $(yabai -m window --display south; yabai -m display --focus south)
alt + shift - down  : yabai -m window --warp south || $(yabai -m window --display south; yabai -m display --focus south)

# TODO: Figure out how ot make this intuitive change warp (basically merges)
shift + ctrl - l : yabai -m window --warp east  || $(yabai -m window sibling --insert east ; yabai -m window --warp sibling)
shift + ctrl - h : yabai -m window --warp west  || $(yabai -m window sibling --insert west ; yabai -m window --warp sibling)
shift + ctrl - k : yabai -m window --warp north || $(yabai -m window sibling --insert north; yabai -m window --warp sibling)
shift + ctrl - j : yabai -m window --warp south || $(yabai -m window sibling --insert south; yabai -m window --warp sibling) 

cmd + ctrl - m : yabai -m window sibling --insert stack ; yabai -m window --warp sibling

# move focused window to next/prev workspace
# Note: SIP is enabled so yabai can't create or focus a specific space
alt + shift - 1 : yabai -m window --space 1
alt + shift - 2 : yabai -m window --space 2
alt + shift - 3 : yabai -m window --space 3
alt + shift - 4 : yabai -m window --space 4
alt + shift - 5 : yabai -m window --space 5
alt + shift - 6 : yabai -m window --space 6
alt + shift - 7 : yabai -m window --space 7
alt + shift - 8 : yabai -m window --space 8
alt + shift - 9 : yabai -m window --space 9

# change layout of desktop
# alt + shift - t : yabai -m space --layout bsp
# alt + shift - s : yabai -m space --layout stack

# toggle window split type (horizontal / vertical)
alt - i : yabai -m window --toggle split

# Float and center
alt - f : yabai -m window --toggle float ; yabai -m window --grid 4:4:1:1:2:2
alt - w : yabai -m window --close

# Single-window scratchpad-like functionality, using semicolon (0x29 = ;)
alt - 0x29 : /Users/kyeb/.dotfiles/yabai/scratchpad

